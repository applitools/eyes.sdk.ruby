name: Ruby

on:
  push:
#    paths:
#      - 'ruby/**'
  workflow_dispatch:
    inputs:
      basic-tests:
        description: Basic tests
        type: boolean
        required: false
        default: true
      generic-tests:
        description: Generic tests
        type: boolean
        required: false
        default: true

  workflow_call:
    inputs:
      ref:
        description: branch to test
        required: false
        type: string
      releasing_package:
        description: name of the package being released
        required: false
        type: string
      # Same parameters as workflow_dispatch, run all tests by default
      basic-tests:
        description: Basic tests
        type: boolean
        required: false
        default: true
      generic-tests:
        description: Generic tests
        type: boolean
        required: false
        default: true


permissions:
  contents: read

jobs:
  dist-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Build gems
        env:
          BUILD_ONLY: true
        working-directory: ruby
        run: |
          gem install builder
          rake clobber clean build
          cd pkg; mkdir gems; mv ./*.gem ./gems; gem generate_index; cd ..
      - name: Store gems
        uses: actions/upload-artifact@v3
        with:
          name: gems
          if-no-files-found: error
          path: "./pkg/*"
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Generate platform tests
        working-directory: ruby
        run: |
          npm install
          npm run generate:platform
      - name: Store platform tests
        uses: actions/upload-artifact@v3
        with:
          name: platform-tests
          if-no-files-found: error
          path: "./coverage_tests/spec/**/*"
#      - name: Generate generic tests
#        working-directory: ruby
#        run: |
#          npm install
#          npm run generate
#      - name: Store generic tests
#        uses: actions/upload-artifact@v3
#        with:
#          name: generic-tests
#          if-no-files-found: error
#          path: "./coverage_tests/spec/**/*"



  platform-test:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.basic-tests }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        ruby-version: ['2.6', '2.7', '3.0', '3.1']
    runs-on: ${{ matrix.os }}
    env:
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
#          bundler-cache: true
      - name: Load gems
        uses: actions/download-artifact@v3
        with:
          name: gems
          path: "./pkg/"
#      - name: Check gems
#        working-directory: ruby
#        run: |
#          ls pkg
#          ls pkg\gems
      - name: Load tests
        uses: actions/download-artifact@v3
        with:
          name: platform-tests
          path: "./coverage_tests/spec/"
#      - name: Check tests
#        working-directory: ruby
#        run: |
#          ls coverage_tests
#          ls coverage_tests/spec
#          ls coverage_tests/spec/coverage/generic
      - name: Run tests
        env:
          BUNDLE_GEMFILE: ${{ github.workspace }}/GemfileGithub
        working-directory: ruby
        run: |
          bundle install
          bundle exec rake github:platform_test

  alpine-test:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.basic-tests }}
    runs-on: ubuntu-latest
    container: "ruby:2-alpine"
    env:
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
      DISPLAY: ':99'

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: Load gems
        uses: actions/download-artifact@v3
        with:
          name: gems
          path: "./pkg/"
      - run: apk add --no-cache g++ musl-dev make git chromium chromium-chromedriver xvfb xvfb-run
        working-directory: ruby
      - run: bundle install
        working-directory: ruby
      - run: xvfb-run bundle exec rspec spec/version/simple_spec.rb
        working-directory: ruby

  unit-test:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.basic-tests }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        ruby-version: ['2.6', '2.7', '3.0', '3.1']
    runs-on: ${{ matrix.os }}
    env:
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
      - name: Load gems
        uses: actions/download-artifact@v3
        with:
          name: gems
          path: "./pkg/"
      - name: Run tests
        env:
          BUNDLE_GEMFILE: ${{ github.workspace }}/GemfileGithub
        working-directory: ruby
        run: |
          bundle install
          bundle exec rake github:unit_tests

  visual-test:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.basic-tests }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        ruby-version: ['2.6', '2.7', '3.0', '3.1']
    runs-on: ${{ matrix.os }}
    env:
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
      - name: Load gems
        uses: actions/download-artifact@v3
        with:
          name: gems
          path: "./pkg/"
      - name: Run visual tests
        env:
          BUNDLE_GEMFILE: ${{ github.workspace }}/GemfileGithub
        working-directory: ruby
        run: |
          bundle install
          bundle exec rake github:vg_tests

  appium-test:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.basic-tests }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        ruby-version: ['2.7', '3.1']
    runs-on: ${{ matrix.os }}
    env:
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
      - name: Load gems
        uses: actions/download-artifact@v3
        with:
          name: gems
          path: "./pkg/"
      - name: Run Appium tests
        env:
          BUNDLE_GEMFILE: ${{ github.workspace }}/GemfileGithub
        working-directory: ruby
        run: |
          bundle install
          bundle exec rake github:appium_tests

  universal-server-test:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.basic-tests }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        ruby-version: ['2.6', '2.7', '3.0', '3.1']
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Load gems
        uses: actions/download-artifact@v3
        with:
          name: gems
          path: "./pkg/"
      - name: Run Server tests
        env:
          BUNDLE_GEMFILE: ${{ github.workspace }}/GemfileGithub
        working-directory: ruby
        run: |
          bundle install
          bundle exec rake github:server_tests
          pip install pytest psutil
          pytest -vv spec/universal_server/universal_bindings_termination_test.py

  generic-test:
    needs: dist-build
    if: ${{ !(github.event_name == 'workflow_dispatch') || inputs.generic-tests }}
    runs-on: ubuntu-latest
    env:
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
      APPLITOOLS_API_KEY_READ: ${{ secrets.APPLITOOLS_API_KEY_READ }}
      SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
      SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
      DISPLAY: ':99'

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Load gems
        uses: actions/download-artifact@v3
        with:
          name: gems
          path: "./pkg/"
      - name: Setup xvfb
        working-directory: ruby
        run: |
          sudo apt-get install -y xvfb
          Xvfb -ac $DISPLAY -screen 0 1280x1024x16 &
      - name: Run tests
        working-directory: ruby
        env:
          BUNDLE_GEMFILE: ${{ github.workspace }}/GemfileGithub
        run: |
          bundle install
          chmod +x ./generic_tests.sh && ./generic_tests.sh

  tag-only:
    needs:
      - platform-test
      - alpine-test
      - unit-test
      - visual-test
      - appium-test
      - universal-server-test
      - generic-test
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    env:
      ALLOWED_RELEASE_COMMITERS: ${{ secrets.ALLOWED_RELEASE_COMMITERS }}
      TEST_REPORT_SANDBOX: False

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{inputs.ref || github.ref}}
      - name: ChangeLog check
        working-directory: ruby
        run: |
          export GITHUB_TAG_VERSION=${{ github.ref_name }}
          export TAG_VERSION="${GITHUB_TAG_VERSION%-eyes-images}"
          echo $TAG_VERSION
          if [[ ! ($TAG_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(\.[0-9a-z]+)?$) ]]; then
            echo 'Tag Version check Failed'
            exit 1
          fi
          export SDK_VERSION=$(echo $GITHUB_TAG_VERSION | sed 's/v[^.0-9a-z]*//g')
          echo $SDK_VERSION

          export TMP_CHANGELOG=$(bash ./extractChangeLog.sh "$SDK_VERSION" "CHANGELOG.md")
          export CHANGELOG=$([ -z "$TMP_CHANGELOG" ] && echo "There is no change log for version $SDK_VERSION"; echo "$TMP_CHANGELOG")

          echo $CHANGELOG
          echo $TMP_CHANGELOG

          if [[ (-z "$TMP_CHANGELOG") ]]; then
            echo "THE CHANGELOG IS NOT CORRECT"
            exit 1
          fi

          COMMITTER_EMAIL="$(git log -1 ${{ github.sha }} --pretty="%cE")"

          if [[ ("$ALLOWED_RELEASE_COMMITERS" =~ .*"$COMMITTER_EMAIL".*) && $TMP_CHANGELOG ]]; then
            echo "DEPLOY";
            SDK='ruby'
            TEST_COVERAGE_GAP=$(cat testCoverageGap.txt);
            bash ./sendMail.sh "$SDK" "$TAG_VERSION" "$CHANGELOG" "$TEST_COVERAGE_GAP";
            echo "DEPLOY SUCCESSFUL";
          else
            echo "DEPLOYMENT FAILED";
            exit 1;
          fi
